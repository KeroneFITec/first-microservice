# Nome do workflow visível no GitHub Actions
name: Análise de Segurança

# Configura o gatilho para o workflow.
# Ele será executado em cada 'push' ou 'pull request' na branch 'main'.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Define os jobs (tarefas) que serão executados neste workflow.
jobs:
  # Job para a análise estática de código com CodeQL
  codeql_scan:
    # O ambiente de execução para este job.
    runs-on: ubuntu-latest
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read
    name: CodeQL-Security-Scan

    steps:
    # Checa o repositório para que o workflow possa acessá-lo.
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        # Garante que o histórico completo seja checado para uma análise mais profunda.
        fetch-depth: 0

    # Inicializa o CodeQL para a análise.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: 'java' #'javascript, python, java, csharp'  # Linguagens do seu projeto

    # Auto-compila o código para análise.
    # Para projetos mais complexos, esta etapa pode precisar ser substituída por um comando de build manual.
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    # Executa a análise do CodeQL no código.
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Job para a varredura de vulnerabilidades da imagem Docker com Trivy.
  # Depende do sucesso do job de análise do CodeQL.
  trivy_scan:
    name: Trivy-Container-Scan
    runs-on: ubuntu-latest
    needs: codeql_scan # Só executa se a análise de código CodeQL for bem-sucedida.

    steps:
    # Checa o repositório para ter acesso ao Dockerfile.
    - name: Checkout Repository
      uses: actions/checkout@v3

    # Constrói a imagem Docker do seu projeto.
    - name: Build Docker Image
      run: docker build -t first-microservice . # Substitua 'my-app-image' e '.' pelo nome da sua imagem e caminho do Dockerfile

    # Executa a varredura de vulnerabilidades com o Trivy.
    # 'exit-code 1' faz com que o job falhe se qualquer vulnerabilidade crítica ou de alta severidade for encontrada.
    - name: Run Trivy Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'first-microservice:latest' # Referência à imagem construída no passo anterior
        format: 'table'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'
 